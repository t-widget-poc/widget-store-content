{"version":3,"sources":["Home.js","Camera.js","Geocoding.js","firebase/firebase.js","Auth/Auth.js","App.js","serviceWorker.js","index.js"],"names":["Home","handleToCameraPage","props","history","push","handleToGeoCodingPage","to","onClick","this","React","Component","withRouter","Camera","videoConstraints","video","width","ideal","height","facingMode","Geocoding","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Auth","state","user","auth","onAuthStateChanged","setState","provider","GoogleAuthProvider","signInWithRedirect","signOut","className","displayName","logout","login","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uRAIMA,E,4MACFC,mBAAqB,WACjB,EAAKC,MAAMC,QAAQC,KAAK,Y,EAE5BC,sBAAwB,WACpB,EAAKH,MAAMC,QAAQC,KAAK,e,uDAGxB,OACI,6BACI,4BACI,4BAAI,kBAAC,IAAD,CAAME,GAAG,KAAT,SACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,WAAT,wBAER,4BAAQC,QAASC,KAAKP,oBAAtB,kCAGA,4BAAQM,QAASC,KAAKH,uBAAtB,6C,GAjBGI,IAAMC,W,GAyBVC,YAAWX,G,gBCTXY,E,uKARP,OACI,oCACI,kBAAC,IAAD,CAAQC,iBATS,CACrBC,MAAO,CACHC,MAAO,CAAEC,MAAO,MAChBC,OAAQ,CAAED,MAAO,MAErBE,WAAY,e,GAPHT,IAAMC,WCMZS,EAPG,kBACd,6BACI,oEACA,+G,uBCQRC,IAASC,cAVM,CACXC,OAAQ,0CACRC,WAAY,0CACZC,YAAa,iDACbC,UAAW,0BACXC,cAAe,sCACfC,kBAAmB,eACnBC,MAAO,8CAKIR,QAAf,EC0CeS,E,4MArDXC,MAAQ,CACJC,KAAM,M,EAmBV9B,mBAAqB,WACjB,EAAKC,MAAMC,QAAQC,KAAK,Y,EAE5BC,sBAAwB,WACpB,EAAKH,MAAMC,QAAQC,KAAK,e,kEApBP,IAAD,OAChBgB,EAASY,OAAOC,oBAAmB,SAAAF,GAC/B,EAAKG,SAAS,CAAEH,c,8BAOpB,IAAMI,EAAW,IAAIf,EAASY,KAAKI,mBACnChB,EAASY,OAAOK,mBAAmBF,K,+BAInCf,EAASY,OAAOM,Y,+BAUhB,OACI,yBAAKC,UAAU,QACV/B,KAAKsB,MAAMC,KACR,oCACI,wBAAIQ,UAAU,YAAY/B,KAAKsB,MAAMC,MAAQvB,KAAKsB,MAAMC,KAAKS,YAA7D,wCACA,6BAAK,4BAAQjC,QAASC,KAAKP,oBAAtB,mCACL,6BAAK,4BAAQM,QAASC,KAAKH,uBAAtB,0CAIL,wBAAIkC,UAAU,QAAd,wCAGP/B,KAAKsB,MAAMC,KACR,4BAAQxB,QAASC,KAAKiC,QAAtB,iBAGI,4BAAQlC,QAASC,KAAKkC,OAAtB,qB,GA9CLhC,aCuBJiC,E,uKAhBX,OACE,kBAAC,IAAD,KACE,6BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWjB,IACjC,kBAAC,IAAD,CAAOgB,KAAK,UAAUC,UAAWlC,IACjC,kBAAC,IAAD,CAAOiC,KAAK,aAAaC,UAAW3B,W,GAR9BV,IAAMC,WCIJqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3ebbfd9e.chunk.js","sourcesContent":["import React from 'react'\r\nimport { withRouter } from 'react-router';\r\nimport { Link } from 'react-router-dom'\r\n\r\nclass Home extends React.Component {\r\n    handleToCameraPage = () => {\r\n        this.props.history.push('/camera')\r\n    }\r\n    handleToGeoCodingPage = () => {\r\n        this.props.history.push('/geocoding')\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <ul>\r\n                    <li><Link to='/'>Home</Link></li>\r\n                    <li><Link to='/camera'>カメラ</Link></li>\r\n                </ul>\r\n                <button onClick={this.handleToCameraPage}>\r\n                    カメラ起動\r\n                </button>\r\n                <button onClick={this.handleToGeoCodingPage}>\r\n                    位置情報取得\r\n                </button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withRouter(Home)","import React from 'react'\r\nimport Webcam from \"react-webcam\";\r\n\r\nclass Camera extends React.Component {\r\n    render() {\r\n        const videoConstraints = {\r\n            video: {\r\n                width: { ideal: 1280 },\r\n                height: { ideal: 720 }\r\n            },\r\n            facingMode: \"user\"\r\n        };\r\n        return (\r\n            <>\r\n                <Webcam videoConstraints={videoConstraints} />\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Camera;","import React from 'react'\r\n\r\nconst Geocoding = () => (\r\n    <div>\r\n        <h2>位置情報取得</h2>\r\n        <p>位置情を取得するページです</p>\r\n    </div>\r\n)\r\n\r\nexport default Geocoding;","import firebase from 'firebase/app'\r\nimport 'firebase/auth'\r\n\r\nconst config = {\r\n    apiKey: \"AIzaSyCha6Xc8JnngcLpKZK_NGYPohq4ZjU1ZZ4\",\r\n    authDomain: \"widget-demo-miniprogram.firebaseapp.com\",\r\n    databaseURL: \"https://widget-demo-miniprogram.firebaseio.com\",\r\n    projectId: \"widget-demo-miniprogram\",\r\n    storageBucket: \"widget-demo-miniprogram.appspot.com\",\r\n    messagingSenderId: \"797424423203\",\r\n    appId: \"1:797424423203:web:d7074c80dbaf4a84c7fc96\"\r\n}\r\n\r\nfirebase.initializeApp(config)\r\n\r\nexport default firebase","import React, { Component } from 'react'\r\nimport firebase from '../firebase/firebase'\r\n\r\nclass Auth extends Component {\r\n    state = {\r\n        user: null\r\n    }\r\n\r\n    componentDidMount() {\r\n        firebase.auth().onAuthStateChanged(user => {\r\n            this.setState({ user })\r\n        })\r\n    }\r\n    //componentDidMountはrenderが実行された後に行われる。データの受け渡しが可能な状態になったら下記のコードが実行されていく。\r\n    //onAuthstateChangeでuserにログインしたユーザーの情報を与える\r\n\r\n    login() {\r\n        const provider = new firebase.auth.GoogleAuthProvider()\r\n        firebase.auth().signInWithRedirect(provider)\r\n    }\r\n    //signInWithRedirectでGoogleのログインページに接続して、Google プロバイダ オブジェクトのインスタンスを作成する。\r\n    logout() {\r\n        firebase.auth().signOut()\r\n    }\r\n    handleToCameraPage = () => {\r\n        this.props.history.push('/camera')\r\n    }\r\n    handleToGeoCodingPage = () => {\r\n        this.props.history.push('/geocoding')\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Auth\">\r\n                {this.state.user ? (\r\n                    <>\r\n                        <h1 className=\"UserName\">{this.state.user && this.state.user.displayName}のマイページ</h1>\r\n                        <div><button onClick={this.handleToCameraPage}>カメラ起動</button></div>\r\n                        <div><button onClick={this.handleToGeoCodingPage}>位置情報取得</button></div>\r\n                    </>\r\n                    // displayNameでログインした人のGoogleアカウントに登録されている名前を表示する\r\n                ) : (\r\n                        <h1 className=\"Name\">ログイン画面</h1>\r\n                        //ログインしていない人用の表示\r\n                    )}\r\n                {this.state.user ? (\r\n                    <button onClick={this.logout}>Google Logout</button>\r\n                    //ユーザーがログインしている時はlogoutボタンを表示する\r\n                ) : (\r\n                        <button onClick={this.login}>Google Login</button>\r\n                        //ユーザーがいない時はloginボタンを表示する\r\n                    )}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Auth","import React, { Component } from 'react';\nimport './App.css';\nimport { HashRouter, Route, Switch } from 'react-router-dom'\nimport Home from './Home'\nimport Camera from './Camera'\nimport Geocoding from './Geocoding'\nimport Auth from './Auth/Auth'\n\nclass App extends React.Component {\n  render() {\n    return (\n      <HashRouter>\n        <div>\n          <Switch>\n            <Route exact path='/' component={Auth} />\n            <Route path='/camera' component={Camera} />\n            <Route path='/geocoding' component={Geocoding} />\n          </Switch>\n        </div>\n      </HashRouter  >\n    )\n  }\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}